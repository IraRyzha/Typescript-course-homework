"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
// CREATE MAIN OBJECTS
var SchoolObject = new index_1.School();
var DirectionObjectTechnology = new index_1.Direction("Technology");
var LevelObjectFrontend = new index_1.Level("Frontend development", "Base");
var LevelObjectFullstack = new index_1.Level("Fullstack development", "Advanced");
var LevelObjectBlockchain = new index_1.Level("Blockchain development", "Pro");
var GroupObjectFrontendBase = new index_1.Group("Technology", "Frontend development - base");
var GroupObjectFullstackAdvanced = new index_1.Group("Technology", "Fullstack development - Advanced");
var GroupObjectBlockchainPro = new index_1.Group("Technology", "Blockchain development - Pro");
var StudentIra = new index_1.Student("Ira", "Ryzha", 2006);
var StudentTom = new index_1.Student("Tom", "Uduf", 2003);
var StudentSara = new index_1.Student("Sara", "Rbsdhs", 1998);
var StudentGenry = new index_1.Student("Genry", "Gagsg", 2010);
var StudentMark = new index_1.Student("Mark", "Ojsds", 2005);
StudentIra.setGrade("Web", 11);
StudentIra.setGrade("Fullstack", 8);
StudentIra.setGrade("Crypto", 10);
StudentMark.setGrade("Web", 11);
StudentMark.setGrade("Fullstack", 6);
StudentMark.setGrade("Crypto", 7);
StudentSara.setGrade("Web", 7);
StudentSara.setGrade("Fullstack", 10);
StudentSara.setGrade("Crypto", 5);
StudentGenry.setGrade("Web", 2);
// Planning school learning system
SchoolObject.addDirection(DirectionObjectTechnology);
DirectionObjectTechnology.addLevel(LevelObjectFrontend);
DirectionObjectTechnology.addLevel(LevelObjectFullstack);
DirectionObjectTechnology.addLevel(LevelObjectBlockchain);
LevelObjectFrontend.addGroup(GroupObjectFrontendBase);
LevelObjectFullstack.addGroup(GroupObjectFullstackAdvanced);
LevelObjectBlockchain.addGroup(GroupObjectBlockchainPro);
GroupObjectFrontendBase.addStudent(StudentMark);
GroupObjectFrontendBase.addStudent(StudentIra);
GroupObjectFullstackAdvanced.addStudent(StudentIra);
GroupObjectFullstackAdvanced.addStudent(StudentSara);
GroupObjectBlockchainPro.addStudent(StudentTom);
GroupObjectBlockchainPro.addStudent(StudentIra);
GroupObjectBlockchainPro.addStudent(StudentGenry);
// Try interaction between differennt objects
// console.log(SchoolObject);
// console.log(SchoolObject._directions[0].levels);
// console.log(" ");
// console.log(DirectionObjectTechnology);
// console.log(" ");
// console.log(LevelObjectFrontend);
// console.log(LevelObjectFullstack);
// console.log(LevelObjectBlockchain);
// console.log(" ");
// console.log(GroupObjectFrontendBase);
// console.log(GroupObjectFullstackAdvanced);
// console.log(GroupObjectBlockchainPro);
// console.log(" ");
// console.log(StudentIra);
// console.log(StudentTom);
// console.log(StudentSara);
// console.log(StudentGenry);
// console.log(StudentMark);
console.log(" ");
console.log("Group ".concat(GroupObjectFrontendBase.levelName, " performence"));
GroupObjectFrontendBase.showPerformance().forEach(function (student) {
    return console.log(student);
});
console.log(" ");
console.log("Group ".concat(GroupObjectFullstackAdvanced.levelName, " performence"));
GroupObjectFullstackAdvanced.showPerformance().forEach(function (student) {
    return console.log(student);
});
console.log(" ");
console.log("Group ".concat(GroupObjectBlockchainPro.levelName, " performence"));
GroupObjectBlockchainPro.showPerformance().forEach(function (student) {
    return console.log(student);
});
